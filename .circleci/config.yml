version: 2.1

orbs:
  slack: circleci/slack@4.12.1
  aws: circleci/aws-cli@3.1.5

commands:
  slack_notification_failed:
    description: "A slack notification"
    steps:
      - slack/notify:
          event: fail
          custom: |
            {
              "blocks": [
                {
                  "type": "header",
                  "text": {
                    "type": "plain_text",
                    "text": "Build *${CIRCLE_BUILD_NUM}* Failed. :red_circle:",
                    "emoji": true
                  }
                },
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "mrkdwn",
                      "text": "*Job*: ${CIRCLE_JOB}"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Build*: ${CIRCLE_BUILD_NUM}"
                    }
                  ]
                },
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "mrkdwn",
                      "text": "*Project*: $CIRCLE_PROJECT_REPONAME"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Branch*: $CIRCLE_BRANCH"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Commit*: $CIRCLE_SHA1"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Author*: $CIRCLE_USERNAME"
                    }
                  ],
                  "accessory": {
                    "type": "image",
                    "image_url": "https://assets.brandfolder.com/otz5mn-bw4j2w-6jzqo8/original/circle-logo-badge-black.png",
                    "alt_text": "CircleCI logo"
                  }
                },
                {
                  "type": "actions",
                  "elements": [
                    {
                      "type": "button",
                      "action_id": "basic_fail_view",
                      "text": {
                        "type": "plain_text",
                        "text": "View Job"
                      },
                      "url": "${CIRCLE_BUILD_URL}"
                    }
                  ]
                }
              ]
            }

  slack_notification_succeeded:
    description: "A slack notification succeeded"
    steps:
      - slack/notify:
          event: pass
          custom: |
            {
              "blocks": [
                {
                  "type": "header",
                  "text": {
                    "type": "plain_text",
                    "text": "Build *${CIRCLE_BUILD_NUM}* Succeeded. :white_check_mark:",
                    "emoji": true
                  }
                },
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "mrkdwn",
                      "text": "*Job*: ${CIRCLE_JOB}"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Build*: ${CIRCLE_BUILD_NUM}"
                    }
                  ]
                },
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "mrkdwn",
                      "text": "*Project*: $CIRCLE_PROJECT_REPONAME"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Branch*: $CIRCLE_BRANCH"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Commit*: $CIRCLE_SHA1"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Author*: $CIRCLE_USERNAME"
                    }
                  ],
                  "accessory": {
                    "type": "image",
                    "image_url": "https://assets.brandfolder.com/otz5mn-bw4j2w-6jzqo8/original/circle-logo-badge-black.png",
                    "alt_text": "CircleCI logo"
                  }
                },
                {
                  "type": "actions",
                  "elements": [
                    {
                      "type": "button",
                      "action_id": "basic_success_view",
                      "text": {
                        "type": "plain_text",
                        "text": "View Job"
                      },
                      "url": "${CIRCLE_BUILD_URL}"
                    }
                  ]
                }
              ]
            }

  install-tar-utility:
    description: Install tar utility
    steps:
      - run:
          name: Install tar utility
          command: |
            yum install -y tar gzip

  install-awscli:
    description: Install awscli for environment still not have awscli
    steps:
      - run:
          name: Install dependencies
          command: |
            sudo apt upgrade 
            sudo apt update
            sudo apt install awscli -y
            aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
            aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
            aws configure set region $AWS_DEFAULT_REGION

  install-awscli-alpine-based:
    description: Install awscli for environment still not have awscli
    steps:
      - run:
          name: Install dependencies
          command: |
            pip install --no-cache-dir awscli
            aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
            aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
            aws configure set region $AWS_DEFAULT_REGION

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            export KVDB_URL=https://kvdb.io/V1bG8TqUYay8mW8UfhNS13/migration_${CIRCLE_WORKFLOW_ID:0:7}
            echo $KVDB_URL
            export SUCCESS=$(curl --insecure $KVDB_URL | tail -n 1)
            if(( $SUCCESS==0 ));
            then
              cd backend
              npm run migrations:revert
            fi

  setup_aws:
    description: setup aws
    steps:
      - aws/setup:
          aws-access-key-id: AWS_ACCESS_KEY_ID
          aws-secret-access-key: AWS_SECRET_ACCESS_KEY
          aws-region: AWS_DEFAULT_REGION

  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}"
            aws cloudformation delete-stack --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}"

  clean-s3:
    description: Clean all s3 files
    steps:
      - run:
          name: delete all aws s3 files
          command: aws s3 rm s3://udapeople-"${CIRCLE_WORKFLOW_ID:0:7}" --recursive
          when: on_fail

jobs:
  build-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
      - slack_notification_failed

  build-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
      - slack_notification_failed

  test-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Run frontend test
          command: |
            cd frontend
            npm install
            npm run test
      - slack_notification_failed

  test-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run backend test
          command: |
            cd backend
            npm install
            npm run test
      - slack_notification_failed

  scan-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Scan frontend
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force
      - slack_notification_failed

  scan-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Scan backend
          command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical --force
      - slack_notification_failed

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli:latest
    steps:
      - checkout
      - setup_aws
      - install-tar-utility
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Ensure prometheus infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file ./.circleci/files/prometheus.yml \
              --capabilities CAPABILITY_IAM \
              --tags project=udapeople-prometheus \
              --stack-name "prometheus" \
              --parameter-overrides AuthEmail=${GmailAddress} EmailPassword=${GmailPassword} \ 
              FromEmail=${GmailAddress} ToEmail=${EmailDestination} VPC=${VPC} AZ=${AZ} Subnet=${Subnet}"
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws ec2 describe-instances --filters "Name=tag:Name,Values=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \ 
            --query 'Reservations[*].Instances[*].PublicIpAddress' --output text >> .circleci/ansible/inventory.txt
      - run: cat .circleci/ansible/inventory.txt
      - run: pwd
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - destroy-environment
      - slack_notification_failed

  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.16
    steps:
      - checkout
      - install-awscli-alpine-based
      - add_ssh_keys:
          fingerprints:
            - 31:17:31:2e:60:18:00:d3:8e:5b:33:c8:03:98:8d:5b
      - restore_cache:
          keys: [backend-build]
      - attach_workspace:
          at: ~/
      - run: cat .circleci/ansible/inventory.txt
      - run:
          name: Install dependencies
          command: |
            apk add --update --no-cache tar gzip ansible curl
      - run:
          name: Configure server
          command: |
            cd .circleci/ansible
            ansible-playbook -i inventory.txt configure-server.yml
      - destroy-environment
      - slack_notification_failed

  run-migrations:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            ## Run and save the migration output
            npm run migrations > migrations_dump.txt
      - run:
          name: Send migration results to kvdb
          command: |
            cat ~/project/backend/migrations_dump.txt
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt || grep -q "No migrations are pending" ~/project/backend/migrations_dump.txt
            then
              echo https://kvdb.io/V1bG8TqUYay8mW8UfhNS13/migration_"${CIRCLE_WORKFLOW_ID:0:7}"
              curl https://kvdb.io/V1bG8TqUYay8mW8UfhNS13/migration_"${CIRCLE_WORKFLOW_ID:0:7}" -d '1'
            fi
      - revert-migrations
      - slack_notification_failed

  deploy-frontend:
    docker:
      - image: python:3.7-alpine3.16
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            apk add --update tar 
            apk add gzip
            apk add nodejs
            apk add npm
            apk add curl
            pip3 install awscli
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' \
             --filters "Name=tag:project,Values=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      - destroy-environment
      - revert-migrations
      - slack_notification_failed

  deploy-backend:
    docker:
      - image: python:3.7-alpine3.16
    steps:
      - checkout
      - install-awscli-alpine-based
      - add_ssh_keys:
          fingerprints:
            - 31:17:31:2e:60:18:00:d3:8e:5b:33:c8:03:98:8d:5b
      - attach_workspace:
          at: ~/
      - run: cat .circleci/ansible/inventory.txt
      - run:
          name: Install dependencies
          command: |
            apk add --update --no-cache tar gzip nodejs npm ansible curl
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Deploy backend
          command: |
            cd backend
            npm install
            npm run build
            cd ..
            tar -C backend -czvf artifact.tar.gz .
            cd .circleci/ansible
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml
      - revert-migrations
      - destroy-environment
      - slack_notification_failed

  smoke-test:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - install-awscli
      - run:
          name: Backend smoke test.
          command: |
            export BACKEND_IP=$(tail ~/project/.circleci/ansible/inventory.txt)
            export BACKEND_IP=$(aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filters Name=tag:aws:cloudformation:stack-name,Values=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7} \
            --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            if curl -s "${API_URL}/api/status" | grep "ok"
            then
              exit 0
            else
              exit 1
            fi
      - run:
          name: Frontend smoke test.
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-${AWS_DEFAULT_REGION}.amazonaws.com/#/employees"            
            echo ${URL} 
            if curl -s ${URL} | grep "Welcome"
            then
              exit 0
            else
              exit 1
            fi
      - revert-migrations
      - destroy-environment
      - clean-s3
      - slack_notification_failed

  cloudfront-update:
    docker:
      - image: amazon/aws-cli:latest
    steps:
      - checkout
      - setup_aws
      - install-tar-utility
      - run:
          name: Update cloudfront distribution
          command: |
            export OldWorkflowID=$(aws cloudformation \
              list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
              --no-paginate --output text)
            echo OldWorkflowID: "${OldWorkflowID}"
            echo CIRCLE_WORKFLOW_ID "${CIRCLE_WORKFLOW_ID:0:7}"
             aws cloudformation deploy \
              --template-file .circleci/files/cloudfront.yml \
              --stack-name "InitialStack" \
              --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople
            echo ${OldWorkflowID} >> oldWorkflowId.txt
            pwd
      - persist_to_workspace:
          root: ~/
          paths:
            - project/oldWorkflowId.txt
      - clean-s3
      - destroy-environment
      - slack_notification_failed

  cleanup:
    docker:
      - image: amazon/aws-cli:latest
    steps:
      - checkout
      - setup_aws
      - install-tar-utility
      - attach_workspace:
          at: ~/
      - run:
          name: Remove old stacks and files
          command: |
            cat oldWorkflowId.txt
            export OldWorkflowID=$(cat oldWorkflowId.txt)
            export OldWorkflowIDFromAWS=$(aws cloudformation \
              list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
              --no-paginate --output text)
            echo OldWorkflowID: "${OldWorkflowID}"
            echo OldWorkflowIDFromAWS: "${OldWorkflowIDFromAWS}"
            echo CIRCLE_WORKFLOW_ID "${CIRCLE_WORKFLOW_ID:0:7}"
            if [[ "${CIRCLE_WORKFLOW_ID:0:7}" != "${OldWorkflowID}" ]]
            then
              echo "Start to clean up..."
              aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive
              aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"
              aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}"
            fi
      - slack_notification_failed
      - slack_notification_succeeded
  
  add-prometheus-node-exporter:
    docker:
      - image: python:3.7-alpine3.16
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - 31:17:31:2e:60:18:00:d3:8e:5b:33:c8:03:98:8d:5b
      - run:
          name: Install dependencies
          command: |
            apk add --update awscli tar gzip ansible nodejs npm
      - attach_workspace:
          at: ~/
      - run:
          name: Setup Prometheus Node Exporter
          command: |
            cd .circleci/ansible
            cat inventory.txt
            ansible-playbook -i inventory.txt node-exporter.yml
      - destroy-environment
      - revert-migrations

workflows:
  default:
    jobs:
      - build-frontend:
          filters:
            branches:
              only: [dev-branch]
      - build-backend:
          filters:
            branches:
              only: [dev-branch]
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
      - add-prometheus-node-exporter:
          requires: [deploy-infrastructure]
      - configure-infrastructure:
          requires: [add-prometheus-node-exporter]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update, add-prometheus-node-exporter]
